
This framework is a SQLite-based static site generator with the following features and benefits:

1. AbsurdSQL as the Core:
   - SQLite database serves as the single source of truth for all content, metadata, and templates.
   - Powered by AbsurdSQL, it runs entirely in the browser, enabling offline functionality.

2. Offline-First PWA Design:
   - Utilizes service workers and AbsurdSQL for offline-first performance.
   - Pages and data load instantly, even without an internet connection.

3. Custom Metadata System:
   - Supports meta.yaml files for folder-level metadata and Markdown front matter for per-page settings.
   - Automates routing, path generation, and template assignment.

4. Pre-Rendering and Caching:
   - Pre-renders all pages as static HTML for SEO and fast initial loads.
   - Caches HTML, SQLite database, and service worker during deployment.

5. Incremental Updates:
   - Supports syncing updates to the SQLite database from a server or CDN, ensuring dynamic updates while maintaining static content benefits.

6. Self-Contained Deployment:
   - The deployment consists of a single SQLite file, pre-rendered HTML, and static assets.
   - Ideal for lightweight blogs, documentation sites, or offline-first apps.

---

Development Steps for Aider:

Phase 1: SQLite Database Initialization
- Define the database schema:
  - pages: Stores page content, metadata, and routing information.
  - Other tables can be added in later versions (e.g., assets for image handling).
- Initialize the SQLite database using AbsurdSQL.

Phase 2: Recursive Metadata Handling
- Process meta.yaml files recursively.
- Merge metadata from meta.yaml with front matter in Markdown files.

Phase 3: Markdown Parsing and Path Management
- Parse Markdown files to extract content and metadata.
- Generate routing paths based on file structure and/or front matter.
- Store parsed data into the SQLite pages table.

Phase 4: Pre-Rendering Static HTML
- make a template folder with some default templates
- load them in the assets table in the database
- Generate static HTML pages from the SQLite database using the templates from the database.
- Ensure the HTML is SEO-friendly and supports smooth offline functionality.
- make this pre rendring happen with the bun build command

Phase 4.5: post-load the sqlite database into the browser with AbsurdSQL


Phase 5: PWA and Service Worker

 - make a js script that loads the sqlite database into the browser with absurdsql
 - include this in the templates and load it after page load (it should not block)

- Create a service worker to:
  - Cache pre-rendered HTML files

Phase 5.5: offline navigation and seamless updates
 
  - Enable offline navigation and seamless updates using the templates and article data in sqlite 


phase 5.8 - blog structure 

 - make a few more example landing pages and blog posts that link to eachother
 - have the home page have a paginated list of all the blog posts and a nav to the other pages
 - the list of blog posts should come from a query to the database - you should be able to query it from a template
 - make some basic css styling for the blog and put that in the assets table in teh database.  use it in the templates
 - make an rss feed and sitemap stored in the database and able to be rendered offline
 - make a robots.txt file stored in the database and able to be rendered offline
 
 - add a search bar to the nav - powered by sqlite full text search

Phase 6: Incremental Updates
- Implement a mechanism to sync updated SQLite databases from a server or CDN.
- Dynamically apply updates to the local SQLite database.

Phase 7: Deployment
- Package the SQLite database, pre-rendered HTML files, and service worker.
- Deploy the package to a hosting platform like Netlify or AWS S3.

---

Setup:
1. Create the project folder with the following structure:
   /project
     /content        # Markdown files and meta.yaml for site content
     /scripts        # Build and pre-rendering scripts
     /dist           # Output directory for SQLite, HTML, and assets

2. Install dependencies:
   - Node.js modules: sqlite, absurd-sql, gray-matter, and yaml.

---

Phase-by-Phase Development Code (Summarized):

Phase 1: SQLite Database Initialization
const { open } = require('sqlite');
const sqlite3 = require('sqlite3');

async function createDatabase(dbFilePath) {
    const db = await open({
        filename: dbFilePath,
        driver: sqlite3.Database,
    });

    await db.exec(\`
        CREATE TABLE IF NOT EXISTS pages (
            id INTEGER PRIMARY KEY,
            slug TEXT NOT NULL,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            template TEXT NOT NULL,
            lang TEXT,
            tags TEXT,
            path TEXT NOT NULL
        );
    \`);

    console.log('Database schema created.');
    return db;
}

Phase 2: Recursive Metadata Handling
const fs = require('fs/promises');
const path = require('path');
const yaml = require('yaml');
const grayMatter = require('gray-matter');

async function loadMeta(filePath) {
    const content = await fs.readFile(filePath, 'utf8');
    return yaml.parse(content);
}

async function collectMetadata(baseDir, parentMeta = {}) {
    const entries = await fs.readdir(baseDir, { withFileTypes: true });
    const metaFile = entries.find((entry) => entry.name === 'meta.yaml');

    const currentMeta = metaFile
        ? { ...parentMeta, ...(await loadMeta(path.join(baseDir, metaFile.name))) }
        : { ...parentMeta };

    const results = [];
    for (const entry of entries) {
        const entryPath = path.join(baseDir, entry.name);
        if (entry.isDirectory()) {
            results.push(...(await collectMetadata(entryPath, currentMeta)));
        } else if (entry.name.endsWith('.md')) {
            const content = await fs.readFile(entryPath, 'utf8');
            const { data: frontMatter, content: markdown } = grayMatter(content);
            const finalMeta = { ...currentMeta, ...frontMatter };
            results.push({ path: entryPath, metadata: finalMeta, content: markdown });
        }
    }

    return results;
}

Phase 3: Markdown Parsing and Path Management
async function storePagesInDatabase(db, pages) {
    for (const page of pages) {
        const { path: filePath, data, content } = page;
        const slug = data.slug || path.basename(filePath, '.md');

        await db.run(\`
            INSERT INTO pages (slug, title, content, template, lang, tags, path)
            VALUES (?, ?, ?, ?, ?, ?, ?)\`,
            [
                slug,
                data.title || 'Untitled',
                content,
                data.template || 'default',
                data.lang || 'en',
                (data.tags || []).join(','),
                data.path || `/${slug}.html`
            ]
        );
    }
    console.log(\`\${pages.length} pages stored in database.\`);
}

Phase 4-7: TBD based on full implementation.
